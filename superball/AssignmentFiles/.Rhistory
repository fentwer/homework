xlab("x")+
ylab("y")
str(KMeans$cluster)
cluster = ifelse(KMeans$cluster==3,"Red","Background")
files1 <- paste0("superballs_ms_0",1:9)
files2 <- paste0("superballs_ms_",10:31)
files <- c(files1,files2)
train.temp <-data.frame(matrix(0,512*512,31))
for(i in 1:31) {
ms <- readImage(paste(files[i],"png",sep='.'))%>%
melt()%>%
.[3]
train.temp[,i] <- ms
}
colnames(train.temp) <- paste("V",1:31,sep ="" )
Red_Mask <- readImage("Red_Mask.png")
colorMode(Red_Mask) <- Grayscale
Red_Mask <- Red_Mask[,,1]/3 + Red_Mask[,,2]/3 + Red_Mask[,,3]/3
Red_Mask <- melt(Red_Mask)%>%
.[,3]
Red_Mask <- ifelse(Red_Mask>0.5,"Red","Background")
train.temp <- cbind(train.temp,Class=Red_Mask)
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==3,1,0)
cluster = matrix(cluster2,512,512)
display(cluster2)
display(cluster)
cluster = ifelse(KMeans$cluster==4,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==3,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
cluster2 = ifelse(KMeans$cluster==4,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
cluster = ifelse(KMeans$cluster==5,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==5,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
cluster = ifelse(KMeans$cluster==6,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==6,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
cluster = ifelse(KMeans$cluster==7,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==7,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
Image <- readImage("superballs_RGB.png")
imgDm <- dim(Image)
imgRGB <- data.frame(x=rep(1:imgDm[2],imgDm[1]),
y=rep(imgDm[1]:1,each=imgDm[2]),
R=as.vector(Image[,,1]),
G=as.vector(Image[,,2]),
B=as.vector(Image[,,3]))
# ggplot theme to be used
plotTheme <- function() {
theme(
panel.background = element_rect(
size = 3,
colour = "black",
fill = "white"),
axis.ticks = element_line(
size = 2),
panel.grid.major = element_line(
colour = "gray80",
linetype = "dotted"),
panel.grid.minor = element_line(
colour = "gray90",
linetype = "dashed"),
axis.title.x = element_text(
size = rel(1.2),
face = "bold"),
axis.title.y = element_text(
size = rel(1.2),
face = "bold"),
plot.title = element_text(
size = 20,
face = "bold",
vjust = 1.5)
)
}
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 8)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
kcolors1 <- rgb(KMeans$centers[KMeans$cluster[KMeans$cluster==3],])
kcolors2 <- rgb(KMeans$centers[KMeans$cluster[KMeans$cluster!=3],])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",8,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",8,"Colours"))+
xlab("x")+
ylab("y")
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 8)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",8,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==7,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==7,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
set.seed(7)
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 8)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",8,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==7,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster = ifelse(KMeans$cluster==6,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster = ifelse(KMeans$cluster==5,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster = ifelse(KMeans$cluster==4,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster = ifelse(KMeans$cluster==2,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==2,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
set.seed(7)
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 9)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",9,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==2,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==2,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
set.seed(7)
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 15)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",15,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==2,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
set.seed(7)
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 9)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",9,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==2,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==2,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
display(cluster2)
setwd("D:/qiyi/R/superball/AssignmentFiles")
library("dplyr")
library("reshape2")
library("ggplot2")
library("caret")
library("EBImage")
training <- read.csv("training.csv")
test <- read.csv("test.csv")
training$X <- NULL
test$X <- NULL
set.seed(7)
inTrainingSet <- createDataPartition(training$Class,
p = 0.60, list = FALSE)
CreditTrain <- training[inTrainingSet,]
Crediteval <- training[-inTrainingSet,]
set.seed(7)
fit.lda <- train(Class~., data=CreditTrain,
method="lda", metric="Accuracy"
)
print(fit.lda)
pred.Crediteval <- predict(fit.lda,Crediteval[,-33])
confusionMatrix(pred.Crediteval,Crediteval$Class)
#Question 3##################
set.seed(7)
fit.lda <- train(Class~., data=training,
method="lda", metric="Accuracy"
)
pred.test <- predict(fit.lda,test[,-33])
confusionMatrix(pred.test,test$Class)
#Question 4.1##################
correlation <- cor(training[,-32])
Image <- readImage("superballs_RGB.png")
display(Image)
Imagedata <- imageData(Image)
files1 <- paste0("superballs_ms_0",1:9)
files2 <- paste0("superballs_ms_",10:31)
files <- c(files1,files2)
train.temp <-data.frame(matrix(0,512*512,31))
for(i in 1:31) {
ms <- readImage(paste(files[i],"png",sep='.'))%>%
melt()%>%
.[3]
train.temp[,i] <- ms
}
colnames(train.temp) <- paste("V",1:31,sep ="" )
Red_Mask <- readImage("Red_Mask.png")
colorMode(Red_Mask) <- Grayscale
dim(Red_Mask)
Red_Mask <- Red_Mask[,,1]/4 + Red_Mask[,,2]/4 + Red_Mask[,,3]/4 +Red_Mask[,,4]/4
display(Red_Mask)
Red_Mask <- melt(Red_Mask)%>%
.[,3]
Red_Mask <- ifelse(Red_Mask>0.5,"Red","Background")
train.temp <- cbind(train.temp,Class=Red_Mask)
b <- melt(train.temp,var.ids=32, measure.vars=c(1:31))
p1 <- ggplot(b, aes(x=variable, y=value, fill=Class)) +
geom_boxplot()
p1
pred.temp <- predict(fit.lda,train.temp[,-32])
imag <- ifelse(pred.temp=="Red",1,0) %>%
matrix(512,512)
display(imag)
confusionMatrix(pred.temp,factor(train.temp$Class))
importance <- varImp(fit.lda, scale=FALSE)
print(importance)
# plot importance
plot(importance)
set.seed(7)
fitControl <- trainControl(method = "cv",
number = 5,
returnResamp = "final",
classProbs = TRUE
#summaryFunction = twoClassSummary
)
model_lda <- train(Class~.,data=training,
method = "lda",
trControl = fitControl,
metric = metric
)
metric <- "Accuracy"
model_lda <- train(Class~.,data=training,
method = "lda",
trControl = fitControl,
metric = metric
)
set.seed(7)
fitControl <- trainControl(method = "cv",
number = 5,
returnResamp = "final",
classProbs = TRUE
#summaryFunction = twoClassSummary
)
model_DT <- train(Class~.,data=training,
method = "repart",
trControl = fitControl,
metric = metric
)
set.seed(7)
fitControl <- trainControl(method = "cv",
number = 5,
returnResamp = "final",
classProbs = TRUE
#summaryFunction = twoClassSummary
)
model_DT <- train(Class~.,data=training,
method = "rpart",
trControl = fitControl,
metric = metric
)
set.seed(7)
fitControl <- trainControl(method="cv",
number=5,
returnResamp = "final",
classProbs = TRUE
#summaryFunction = twoClassSummary
)
model_knn <- train(Class~.,data=training,
method = "knn",
trControl = fitControl,
metric = metric
)
boosting_results <- resamples(list(lda=model_lda, DT=model_DT,knn=model_knn))
summary(boosting_results)
dotplot(boosting_results)
set.seed(7)
fitControl <- trainControl(method="cv",
number=5,
returnResamp = "final",
classProbs = TRUE
#summaryFunction = twoClassSummary
)
model_knn_2 <- train(Class~.,data=training,
method = "knn",
trControl = fitControl,
metric = metric,
preProc = c("center", "scale")
)
boosting_results <- resamples(list(knn=model_knn, pre.knn=model_knn_2))
summary(boosting_results)
Image <- readImage("superballs_RGB.png")
imgDm <- dim(Image)
imgRGB <- data.frame(x=rep(1:imgDm[2],imgDm[1]),
y=rep(imgDm[1]:1,each=imgDm[2]),
R=as.vector(Image[,,1]),
G=as.vector(Image[,,2]),
B=as.vector(Image[,,3]))
# ggplot theme to be used
plotTheme <- function() {
theme(
panel.background = element_rect(
size = 3,
colour = "black",
fill = "white"),
axis.ticks = element_line(
size = 2),
panel.grid.major = element_line(
colour = "gray80",
linetype = "dotted"),
panel.grid.minor = element_line(
colour = "gray90",
linetype = "dashed"),
axis.title.x = element_text(
size = rel(1.2),
face = "bold"),
axis.title.y = element_text(
size = rel(1.2),
face = "bold"),
plot.title = element_text(
size = 20,
face = "bold",
vjust = 1.5)
)
}
set.seed(7)
KMeans <- kmeans(imgRGB[,c("R","G","B")],centers = 9)
kcolors <- rgb(KMeans$centers[KMeans$cluster,])
ggplot(data=imgRGB,aes(x=x,y=y))+
geom_point(colour=kcolors)+
labs(title=paste("k-Means Clustering of",9,"Colours"))+
xlab("x")+
ylab("y")+
plotTheme()
cluster = ifelse(KMeans$cluster==2,"Red","Background")
confusionMatrix(cluster,train.temp$Class)
cluster2 = ifelse(KMeans$cluster==2,1,0)
cluster2 = matrix(cluster2,512,512)
display(cluster2)
?wmtsa
??wmtsa
?wavZeroPhase
library(wmtsa)
?wavZeroPhase
?waveslim
??waveslim
df <- ToothGrowth
# Convert the variable dose from a numeric to a factor variable
df$dose <- as.factor(df$dose)
head(df)
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
bp
bp + background_grid(major = "xy", minor = "none")
library("cowplot")
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
bp
bp + background_grid(major = "xy", minor = "none")
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
bp
bp + background_grid(major = "xy", minor = "none")
# Scatter plot
sp <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl)))+
geom_point(size=2.5)
sp
# Bar plot
bp <- ggplot(diamonds, aes(clarity, fill = cut)) +
geom_bar() +
theme(axis.text.x = element_text(angle=70, vjust=0.5))
bp
plot_grid(sp, bp, labels=c("A", "B"), ncol = 2, nrow = 1)
plot.iris <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() + facet_grid(. ~ Species) + stat_smooth(method = "lm") +
background_grid(major = 'y', minor = "none") + # add thin horizontal lines
panel_border()
ggdraw() +
draw_plot(plot.iris, 0, .5, 1, .5) +
draw_plot(sp, 0, 0, .5, .5) +
draw_plot(bp, .5, 0, .5, .5) +
draw_plot_label(c("A", "B", "C"), c(0, 0, 0.5), c(1, 0.5, 0.5), size = 15)
library(ggplot2)
# Create a box plot
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
# Create a dot plot
# Add the mean point and the standard deviation
dp <- ggplot(df, aes(x=dose, y=len, fill=dose)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=mean_sdl, mult=1,
geom="pointrange", color="red")+
theme(legend.position = "none")
# Create a violin plot
vp <- ggplot(df, aes(x=dose, y=len)) +
geom_violin()+
geom_boxplot(width=0.1)
# Create a stripchart
sc <- ggplot(df, aes(x=dose, y=len, color=dose, shape=dose)) +
geom_jitter(position=position_jitter(0.2))+
theme(legend.position = "none") +
theme_gray()
grid.arrange(bp, dp, vp, sc, ncol=2, nrow =2)
library(gridExtra)
grid.arrange(bp, dp, vp, sc, ncol=2, nrow =2)
?ggplot
?stat_summary
library(ggplot2)
# Create a box plot
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
# Create a dot plot
# Add the mean point and the standard deviation
dp <- ggplot(df, aes(x=dose, y=len, fill=dose)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=mean_sdl,
geom="pointrange", color="red")+
theme(legend.position = "none")
# Create a violin plot
vp <- ggplot(df, aes(x=dose, y=len)) +
geom_violin()+
geom_boxplot(width=0.1)
# Create a stripchart
sc <- ggplot(df, aes(x=dose, y=len, color=dose, shape=dose)) +
geom_jitter(position=position_jitter(0.2))+
theme(legend.position = "none") +
theme_gray()
grid.arrange(bp, dp, vp, sc, ncol=2, nrow =2)
plot_grid(bp, dp,vp,sc, labels=c("A", "B","c","d"), ncol = 2, nrow = 2)
grid.arrange(bp, arrangeGrob(dp, sc), ncol = 2)
grid.arrange(bp, arrangeGrob(dp, vp,sc), ncol = 2)
grid.arrange(bp, dp, sc, vp, ncol = 2,
layout_matrix = cbind(c(1,1,1), c(2,3,4)))
?layout_matrix
?grid.arrange
grid.arrange(bp, dp, sc, vp, ncol = 2,
layout_matrix = cbind(c(1,2), c(3,4)))
set.seed(1234)
x <- c(rnorm(500, mean = -1), rnorm(500, mean = 1.5))
y <- c(rnorm(500, mean = 1), rnorm(500, mean = 1.7))
group <- as.factor(rep(c(1,2), each=500))
df2 <- data.frame(x, y, group)
scatterPlot <- ggplot(df2,aes(x, y, color=group)) +
geom_point() +
scale_color_manual(values = c('#999999','#E69F00')) +
theme(legend.position=c(0,1), legend.justification=c(0,1))
# Marginal density plot of x (top panel)
xdensity <- ggplot(df2, aes(x, fill=group)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c('#999999','#E69F00')) +
theme(legend.position = "none")
# Marginal density plot of y (right panel)
ydensity <- ggplot(df2, aes(y, fill=group)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c('#999999','#E69F00')) +
theme(legend.position = "none")
grid.newpage()
# Create layout : nrow = 2, ncol = 2
pushViewport(viewport(layout = grid.layout(2, 2)))
# A helper function to define a region on the layout
define_region <- function(row, col){
viewport(layout.pos.row = row, layout.pos.col = col)
}
# Arrange the plots
print(scatterPlot, vp=define_region(1, 1:2))
print(xdensity, vp = define_region(2, 1))
print(ydensity, vp = define_region(2, 2))
library("gridExtra")
grid.newpage()
# Create layout : nrow = 2, ncol = 2
pushViewport(viewport(layout = grid.layout(2, 2)))
# A helper function to define a region on the layout
define_region <- function(row, col){
viewport(layout.pos.row = row, layout.pos.col = col)
}
# Arrange the plots
print(scatterPlot, vp=define_region(1, 1:2))
print(xdensity, vp = define_region(2, 1))
print(ydensity, vp = define_region(2, 2))
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + background_grid(minor='none')
ggdraw(add_sub(p1, "This is an annotation.\nAnnotations can span multiple lines."))
# You can also do this repeatedly. Just be aware that new annotations are added above previous ones:
p2 <- add_sub(p1, expression(paste(a^2+b^2, " = ", c^2)))
p3 <- add_sub(p2, "This formula has no relevance here:", y  = 0, vjust = 0)
ggdraw(p3)
