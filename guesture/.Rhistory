segments(x0=x[,1],y0=x[,2],
x1=z1[,1],y1=z1[,2])
}
library(cluster)
set.seed(123)
# Load the data
data("USArrests")
# Subset of USArrests
ss <- sample(1:50, 20)
df <- scale(USArrests[ss,])
# Compute fuzzy clustering
res.fanny <- fanny(df, 4)
# Cluster plot using fviz_cluster()
# You can use also : clusplot(res.fanny)
library(factoextra)
fviz_cluster(res.fanny, frame.type = "norm",
frame.level = 0.68)
a1=res.fanny$data
View(a1)
install_github("google/CausalImpact")
devtools::install_github("google/CausalImpact")
library(CausalImpact)
?CausalImpact
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
summary(impact)
summary(impact, "report")
plot(impact)
plot(impact, "original")
plot(impact$model$bsts.model, "coefficients")
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
# Print and plot results
summary(impact)
summary(impact, "report")
plot(impact)
plot(impact, "original")
plot(impact$model$bsts.model, "coefficients")
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
matplot(data, type = "l")
?matplot
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
time.points <- seq.Date(as.Date("2014-01-01"), by = 1, length.out = 100)
data <- zoo(cbind(y, x1), time.points)
head(data)
pre.period <- as.Date(c("2014-01-01", "2014-03-11"))
post.period <- as.Date(c("2014-03-12", "2014-04-10"))
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
impact$summary
devtools::install_github("rstudio/htmltools")
devtools::install_github("rstudio/shiny")
devtools::install_github("rstudio/miniUI")
devtools::install_github("rstudio/addinexamples")
addinexamples:::subsetAddin()
devtools::install_github("thertrader/fidlr", type = "source")
fidlr:::fidlr()
install.packages("rstan")
library(rstan)
d <- read.csv(url("http://hosho.ees.hokudai.ac.jp/~kubo/stat/iwanamibook/fig/hbm/data7a.csv"))
head(d)
library(bsts)
data(AirPassengers)
air <- log10(AirPassengers)
## The regression analysis
time <- seq_along(air)
months <- time %% 12
months[months == 0] <- 12
months <- factor(months, label = month.name)
reg <- lm(air ~ time + months)
plot(reg$fitted.values, reg$residuals, xlab = "fitted", ylab = "residuals")
## pdf("figs/airpass-linear-residual-plot.pdf", width= 5, height= 5)
## plot(reg$fitted.values, reg$residuals, xlab = "fitted", ylab = "residuals", las = 1)
## dev.off()
reg <- lm(air ~ poly(time, 2) + months)
plot(reg$residuals); abline(h = 0, lty = 3)
pdf("figs/regression-residuals.pdf", width = 5, height = 5)
plot(reg$residuals, las = 1, xlab = "time", ylab = "residuals")
abline(h = 0, lty = 3, las = 1)
dev.off()
pdf("figs/regression-residuals-acf.pdf", width = 5, height = 5)
acf(reg$residuals, main = "", las = 1)
dev.off()
state.specification <- AddLocalLinearTrend(
list(),    ## No previous state specification.
air)       ## Peek at the data to specify default priors.
## state.specification <- AddAr(
##     state.specification,
##     air,
##     lags = 1)
state.specification <- AddSeasonal(
state.specification,  ## Adding to state.specification
air,                  ## The data
nseasons = 12)        ## 12 "seasons"
model <- bsts(air, state.specification = state.specification, niter = 1000)
plot(model)
### pdf("figs/airpass-model.pdf", width = 8, height = 5); plot(model); dev.off()
plot(model, "help")
plot(model, "comp")   ## "components"
plot(model, "resid")  ## "residuals"
pred <- predict(model, horizon = 24, burn = 250)
pdf("figs/airpass-prediction.pdf", width = 8, height = 5)
plot(pred, plot.original = 36)
dev.off()
data(AirPassengers)
air <- log10(AirPassengers)
## The regression analysis
time <- seq_along(air)
months <- time %% 12
months[months == 0] <- 12
months <- factor(months, label = month.name)
reg <- lm(air ~ time + months)
plot(reg$fitted.values, reg$residuals, xlab = "fitted", ylab = "residuals")
reg <- lm(air ~ poly(time, 2) + months)
plot(reg$residuals); abline(h = 0, lty = 3)
plot(reg$residuals, las = 1, xlab = "time", ylab = "residuals")
acf(reg$residuals, main = "", las = 1)
dev.off()
acf(reg$residuals, main = "", las = 1)
state.specification <- AddLocalLinearTrend(
list(),    ## No previous state specification.
air)       ## Peek at the data to specify default priors.
state.specification <- AddSeasonal(
state.specification,  ## Adding to state.specification
air,                  ## The data
nseasons = 12)        ## 12 "seasons"
model <- bsts(air, state.specification = state.specification, niter = 1000)
plot(model)
plot(model, "help")
plot(model, "comp")   ## "components"
plot(model, "resid")  ## "residuals"
pred <- predict(model, horizon = 24, burn = 250)
plot(pred, plot.original = 36)
library(bsts)
data <- read.zoo("correlate-ICNSA.csv", head = T, sep = ",")
ss <- AddLocalLinearTrend(list(), data$ICNSA)
ss <- AddSeasonal(ss, y = data$ICNSA, nseasons=52)
model <- bsts(ICNSA ~ ., data = data, niter = 1000, state.specification=ss)
plot(model)
simulate.random.walk <- function(n, innovation.sd, initial.sd = innovation.sd) {
y0 <- rnorm(1, 0, initial.sd)
innovations <- rnorm(n, 0, innovation.sd)
return(y0 + cumsum(innovations))
}
simulate.local.level <- function(n, innovation.sd, observation.sd, initial.sd = innovation.sd) {
state <- simulate.random.walk(n, innovation.sd, initial.sd)
observation.noise <- rnorm(n, 0, observation.sd)
return(state + observation.noise)
}
local.level.rw <- 3 + simulate.local.level(100, 1, 0)
local.level.constant <- 3 + simulate.local.level(100, 0, 1, 0)
local.level <- simulate.local.level(100, 1, .5)
par(mfrow =c(3, 1))
plot.ts(local.level.rw, main = "tau = 1, sigma = 0")
plot.ts(local.level.constant, main = "tau = 0, sigma = 1")
plot.ts(local.level, main = "tau = 1, sigma = 0.5")
simulate.local.linear.trend <- function(n,
level.sd,
slope.sd,
observation.sd,
initial.level.sd = level.sd,
initial.slope.sd = slope.sd) {
slopes <- simulate.random.walk(n, slope.sd, initial.slope.sd)
level.innovations <- rnorm(n, 0, level.sd)
initial.level <- rnorm(1, 0, initial.level.sd)
levels <- initial.level + cumsum(slopes + level.innovations)
data <- rnorm(n, levels, observation.sd)
return(data)
}
par(mfrow = c(3, 1),
oma= rep(1, 4),
mar = c(5, 3, 1, 1))
llt <- simulate.local.linear.trend(100, 1, .25, .5); plot.ts(llt, ylab = "")
llt <- simulate.local.linear.trend(100, 1, .25, .5); plot.ts(llt, ylab = "")
llt <- simulate.local.linear.trend(100, 1, .25, .5); plot.ts(llt, ylab = "")
library(bsts)
data(rsxfs)
rsxfs <- rsxfs / 1000
plot(as.xts(rsxfs), ylab = "RSXFS / 1000", main = "Retail Sales\n(Excluding Food Service)")
ss <- AddStudentLocalLinearTrend(list(), rsxfs)
student.model <- bsts(rsxfs, ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 24, burn = 500)
ss <- AddLocalLinearTrend(list(), rsxfs)
gaussian.model <- bsts(rsxfs, ss, niter = 5000)
gaussian.predictions <- predict(gaussian.model, horizon = 24, burn = 500)
par(mfrow=c(1,3))
plot(gaussian.predictions$original.series,
ylim = range(gaussian.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(gaussian.predictions,
ylim = range(gaussian.predictions),
main = "Gaussian",
plot.original = 48)
plot(student.predictions,
ylim = range(gaussian.predictions),
main = "Student T",
plot.original = 48)
labels <- c("Gaussian\nLevel", "Student\nLevel", "Gaussian\nSlope", "Student\nSlope")
standard.deviations <- data.frame(
"Gaussian\n level" = gaussian.model$sigma.trend.level,
"Student\n level" = student.model$sigma.trend.level,
"Gaussian\n slope" = gaussian.model$sigma.trend.slope,
"Student\n slope" = student.model$sigma.trend.slope)
burn <- 500
par(mar = c(2, 10, 4, 2))
boxplot(standard.deviations[-(1:burn), ],
main = "Standard Deviations",
horizontal = TRUE,
names = labels,
las = 1)
ss <- AddGeneralizedLocalLinearTrend(list(), rsxfs)
long.term.gaussian.model <- bsts(rsxfs, ss, niter = 5000)
long.term.predictions <- predict(long.term.gaussian.model, horizon = 24, burn = 500)
par(mfrow = c(1,3))
plot(gaussian.predictions$original.series,
ylim = range(gaussian.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(gaussian.predictions,
plot.original = 48,
ylim = range(gaussian.predictions))
title(main = "Local linear trend")
plot(long.term.predictions,
plot.original = 48,
ylim = range(gaussian.predictions))
title(main = "Long term predictions")
sample.size <- 1000
number.of.series <- 1000
many.ar1 <- matrix(nrow = sample.size, ncol =number.of.series)
for (i in 1:number.of.series) {
many.ar1[, i] <- arima.sim(model = list(ar = .95), n = sample.size)
}
many.random.walk <- matrix(nrow = sample.size, ncol = number.of.series)
for (i in 1:number.of.series) {
many.random.walk[, i] <- cumsum(rnorm(sample.size))
}
par(mfrow = c(1, 2))
plot.ts(many.ar1, plot.type = "single", main = "AR 1")
plot.ts(many.random.walk, plot.type = "single", main = "Random Walk")
setwd("D:/qiyi/R/landscape/landscape")
library(dplyr)
library(xts)
library(lubridate)
library(zoo)
rainfall=read.csv("降雨量.csv")
displacement=read.csv("位移.csv")
water_level=read.csv("库水位.csv")
##转化为时间序列xts格式
rainfall <- mutate(rainfall,监测时间=ymd_hm(监测时间))%>%
rename(时间=监测时间)
displacement <-  mutate(displacement,监测时间=ymd_hm(监测时间))%>%
rename(时间=监测时间)
water_level <- water_level[,-1]%>%
mutate(时间=ymd_h(时间))
rainfall <- xts(rainfall[,-1],rainfall[,1])
displacement <- xts(displacement[,-1],displacement[,1])
water_level <- xts(water_level[,-1],water_level[,1])
##求日平均
rainfall <- apply.daily(rainfall,mean)%>%
convertIndex("Date")%>%
align.time(24*60*60)
water_level <- apply.daily(water_level,mean)%>%
convertIndex("Date")%>%
align.time(24*60*60)
displacement <- apply.daily(displacement,mean)%>%
convertIndex("Date")%>%
align.time(24*60*60)
all.xts <- merge(water_level,rainfall)%>%
merge(displacement)
all.xts[,"rainfall"][is.na(all.xts[,"rainfall"])] <- 0
all.xts <- all.xts[,c(1,3,7,11,15,19,23,17,31,35)]
colnames(all.xts) <- c("上游库水位","降雨量","ZG85",
"ZG89","ZG87","ZG88","SP2",
"ZG90","SP6","ZG86")
all.xts1 <- all.xts[,c("上游库水位","降雨量","ZG85",
"ZG88","SP2","ZG90")]
all.xts1 <- na.spline(all.xts1)
ss <- AddLocalLinearTrend(list(), all.xts1[,1])
ss <- AddSeasonal(ss, y = all.xts1[,1], nseasons=3)
student.predictions <- predict(model, horizon = 24, burn = 500)
student.model <- bsts(all.xts1[,1], ss, niter = 5000)
plot(student.model)
par(mfrow=c(1,2))
plot(gaussian.predictions$original.series,
ylim = range(gaussian.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(student.predictions,
ylim = range(gaussian.predictions),
main = "Student T",
plot.original = 48)
student.predictions <- predict(model, horizon = 24, burn = 500)
student.predictions <- predict(student.model, horizon = 24, burn = 500)
plot(student.predictions$original.series,
ylim = range(gaussian.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(student.predictions,
ylim = range(student.predictions),
main = "Student T",
plot.original = 48)
plot(student.predictions,
ylim = range(student.predictions),
main = "Student T",
plot.original = 1200)
?bsts.prediction
student.predictions <- predict(student.model, horizon = 100, burn = 500)
plot(student.predictions,
ylim = range(student.predictions),
main = "Student T",
plot.original = 1200)
ss <- AddLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=3)
student.model <- bsts(all.xts1[,3], ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 100, burn = 500)
plot(student.model)
plot(student.predictions$original.series,
ylim = range(gaussian.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(student.predictions$original.series,
ylim = range(student.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(student.predictions,
ylim = range(student.predictions),
main = "Student T",
plot.original = 1200)
ss <- AddLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=3)
ss <- AddGeneralizedLocalLinearTrend(list(), all.xts1[,3])
student.model <- bsts(all.xts1[,3], ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 100, burn = 500)
plot(student.model)
plot(student.predictions$original.series,
ylim = range(student.predictions),
xlab = "Time",
ylab = "RSXFS / 1000",
main = "Original Data")
plot(student.predictions,
ylim = range(student.predictions),
main = "Student T",
plot.original = 1200)
plot(model, "comp")   ## "components"
plot(student.model, "comp")   ## "components"
ss <- AddGeneralizedLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=3)
student.model <- bsts(all.xts1[,3], ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 100, burn = 500)
plot(student.model, "comp")   ## "components"
plot(student.model, "resid")
ss <- AddGeneralizedLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=38)
student.model <- bsts(all.xts1[,3], ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 100, burn = 500)
plot(student.model)
plot(student.model, "comp")   ## "components"
plot(student.model, "resid")
plot(student.model, "predictors")
library(bsts)
data <- read.zoo("correlate-ICNSA.csv", head = T, sep = ",")
ss <- AddLocalLinearTrend(list(), data$ICNSA)
ss <- AddSeasonal(ss, y = data$ICNSA, nseasons=52)
setwd("D:/qiyi/R")
library(bsts)
data <- read.zoo("correlate-ICNSA.csv", head = T, sep = ",")
ss <- AddLocalLinearTrend(list(), data$ICNSA)
ss <- AddSeasonal(ss, y = data$ICNSA, nseasons=52)
model <- bsts(ICNSA ~ ., data = data, niter = 1000, state.specification=ss)
plot(model)
plot(model, "coefficients")
plot(model, "components")
ss <- AddLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=38)
ss <- AddLocalLinearTrend(list(), all.xts1[,3])
ss <- AddSeasonal(ss, y = all.xts1[,3], nseasons=13)
student.model <- bsts(all.xts1[,3], ss, niter = 5000)
student.predictions <- predict(student.model, horizon = 100, burn = 500)
data(goog)
ss <- AddGeneralizedLocalLinearTrend(list(), goog)
model <- bsts(goog, state.specification = ss, niter = 500)
MakePlots(model)
plots(model)
plots\(model)
plots(model)
plot(model)
data(iclaims)
ss <- AddLocalLinearTrend(list(), initial.claims$iclaimsNSA)
ss <- AddSeasonal(ss, initial.claims$iclaimsNSA, nseasons = 52)
model <- bsts(iclaimsNSA ~ ., state.specification = ss, data =
initial.claims, niter = 1000)
plot(model)
plot(model, "components")
plot(model, "coefficients")
plot(model, "predictors")
MakePlots <- function(model, ask = TRUE) {
## Make all the plots callable by plot.bsts.
opar <- par(ask = ask)
on.exit(par(opar))
plot.types <- c("state", "components", "residuals",
"prediction.errors", "forecast.distribution")
for (plot.type in plot.types) {
plot(model, plot.type)
}
if (model$has.regression) {
regression.plot.types <- c("coefficients", "predictors", "size")
for (plot.type in regression.plot.types) {
plot(model, plot.type)
}
}
}
goog <- zoo(goog, index(goog))
ss <- AddGeneralizedLocalLinearTrend(list(), goog)
model <- bsts(goog, state.specification = ss, niter = 500)
MakePlots(model)
data(goog)
ss <- AddGeneralizedLocalLinearTrend(list(), goog)
model <- bsts(goog, state.specification = ss, niter = 500)
MakePlots(model)
y <- zoo(rnorm(100),
seq(from = as.POSIXct("2012-01-01 7:00 EST"), len = 100, by = 100))
ss <- AddLocalLinearTrend(list(), y)
model <- bsts(y, state.specification = ss, niter = 500)
MakePlots(model)
data(AirPassengers)
y <- log(AirPassengers)
lag.y <- c(NA, head(y, -1))
ss <- AddLocalLinearTrend(list(), y)
ss <- AddSeasonal(ss, y, nseasons = 12)
## Call bsts with na.action = na.omit to omit the leading NA in lag.y
model <- bsts(y ~ lag.y, state.specification = ss, niter = 500,
na.action = na.omit)
plot(model, "predictors")
library(bsts)
data <- read.zoo("correlate-ICNSA.csv", head = T, sep = ",")
ss <- AddLocalLinearTrend(list(), data$ICNSA)
ss <- AddSeasonal(ss, y = data$ICNSA, nseasons=52)
model <- bsts(ICNSA ~ ., data = data, niter = 1000, state.specification=ss)
plot(model)
plot(model, "coefficients",.1)
plot(model, "components")
plot(model, "coef", inc = .1)
plot(model, "coef", inc = .05)
plot(model, "coef", inc = .01)
plot(model, "coef", inc = .02)
plot(model, "predictors", inc = .1)
plot.ts(model, "predictors", inc = .1)
plot(data$ICNSA)
setwd("D:/qiyi/R/兼职/guesture")
library("dplyr")
library("reshape2")
library("lattice")
library("ggplot2")
library("corrplot")
library("FactoMineR")
library("factoextra")
library("caret")
library("cluster")
load("Gesture.RData")
gesture_raw <- rbind(a1_raw,a2_raw)%>%
rbind(.,a3_raw)%>%
rbind(.,b1_raw)%>%
rbind(.,b3_raw)%>%
rbind(.,c1_raw)%>%
rbind(.,c3_raw)
gesture_va3 <- rbind(a1_va3,a2_va3)%>%
rbind(.,a3_va3)%>%
rbind(.,b1_va3)%>%
rbind(.,b3_va3)%>%
rbind(.,c1_va3)%>%
rbind(.,c3_va3)
gesture <- cbind(gesture_va3,gesture_raw)%>%
arrange(timestamp)
densityHeatmap(scale(gesture))
devtools::install_github("jokergoo/ComplexHeatmap")
library("ComplexHeatmap")
densityHeatmap(scale(gesture))
densityHeatmap(gesture)
load("evaluation.RData")
densityHeatmap(scale(score))
debtools::install_github("airbnb/Rbnb")
install_github("airbnb/Rbnb")
library("devtools", lib.loc="C:/Program Files/R/R-3.2.5/library")
install_github("airbnb/Rbnb")
